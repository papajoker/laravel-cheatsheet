{
    "routing": {
        "title": "Routing",
        "doc": "http://www.laravel.com/docs/routing",
        "cheat": {
            "Route::get('foo', function(){});":"Classic route",
            "Route::get('foo', 'ControllerName@function');":""
        },
        "items": [
            {
                "title": "Triggering Errors",
                "cheat": {
                    "App::abort(404);":"",
                    "App::missing(function($exception){});":"",
                    "throw new NotFoundHttpException;":""
                }
            },
            
            {
                "title": "Route Parameters",
                "cheat": {
                    "Route::get('foo/{bar}', function($bar){});": "",
                    "Route::get('foo/{bar?}', function($bar = 'bar'){});": ""
                }
            },
            
            {
                "title": "HTTP Verbs",
                "cheat": {
                    "Route::any('foo', function(){});": "",
                    "Route::post('foo', function(){});": "",
                    "Route::put('foo', function(){});": "",
                    "Route::patch('foo', function(){});": "",
                    "Route::delete('foo', function(){});": "",
                    "": ""
                }
            },
            
            {
                "title": "Secure Routes",
                "cheat": {
                    "Route::get('foo', array('https', function(){}));": "",
                    "": ""
                }
            },
            
            {
                "title": "Route Constraints",
                "cheat": {
                    "Route::get('foo/{bar}', function($bar){})\n\t->where('bar', '[0-9]+');": "",
                    "Route::get('foo/{bar}/{baz}', function($bar, $baz){})\n\t->where(array('bar' => '[0-9]+', 'baz' => '[A-Za-z]'));": ""
                }
            },
            
            {
                "title": "Filters",
                "cheat": {
                    "Route::filter('auth', function(){});": "Declare an auth filter",
                    "Route::filter('foo', 'FooFilter');": "Register a class as a filter",
                    "Route::get('foo', array('before' => 'auth', function(){}));": "Routes in this group are guarded by the 'auth' filter",
                    "Route::group(array('before' => 'auth'), function(){});": "",
                    "Route::when('foo/*', 'foo');": "Pattern filter",
                    "Route::when('foo/*', 'foo', array('post'));": "HTTP verb pattern"
                }
            },
            
            {
                "title": "Named Routes",
                "cheat": {
                    "Route::currentRouteName();": "",
                    "Route::get('foo/bar', array('as' => 'foobar', function(){}));": ""
                }
            },
            
            {
                "title": "Route Prefixing",
                "cheat": {
                    "": "This route group will carry the prefix 'foo'",
                    "Route::group(array('prefix' => 'foo'), function(){})": ""
                }
            },
            
            {
                "title": "Sub-Domain Routing",
                "cheat": {
                    "": "{sub} will be passed to the closure",
                    "Route::group(array('domain' => '{sub}.example.com'), function(){});": ""
                }
            }            
        ]
    },
    
    "urls":{
        "title": "URLs",
        "doc": "http://www.laravel.com/docs/#url",
        "cheat": {
            "URL::full();": "",
            "URL::current();": "",
            "URL::previous();": "",
            "URL::to('foo/bar', $parameters, $secure);": "",
            "URL::action('FooController@method', $parameters, $absolute);": "",
            "URL::route('foo', $parameters, $absolute);": "",
            "URL::secure('foo/bar', $parameters);": "",
            "URL::asset('css/foo.css', $secure);": "",
            "URL::secureAsset('css/foo.css');": "",
            "URL::isValidUrl('http://example.com');": "",
            "URL::getRequest();": "",
            "URL::setRequest($request);": "",
            "URL::getGenerator();": "",
            "URL::setGenerator($generator);": ""
        }
    },
    
    "events":{
        "title": "Events",
        "doc": "http://www.laravel.com/docs/events",
        "cheat": {
            "Event::fire('foo.bar', array($bar));": "",
            "Event::listen('foo.bar', function($bar){});": "",
            "Event::listen('foo.*', function($bar){});": "",
            "Event::listen('foo.bar', 'FooHandler', 10);": "",
            "Event::listen('foo.bar', 'BarHandler', 5);": "",
            "Event::listen('foor.bar', function($event){ return false; });": "",
            "Event::queue('foo', array($bar));": "",
            "Event::flusher('foo', function($bar){});": "",
            "Event::flush('foo');": "",
            "Event::subscribe(new FooEventHandler);": ""
        }
    },
    
    "eloquent":{
        "title": "Eloquent",
        "doc": "http://www.laravel.com/docs/eloquent",
        "cheat": {
            "Model::create(array('key' => 'value'));": "",
            "Model::destroy(1);": "",
            "Model::all();": "",
            "Model::find(1);": "",
            "Model::findOrFail(1);": "Trigger an exception",
            "Model::where('foo', '=', 'bar')->get();": "",
            "Model::where('foo', '=', 'bar')->first();": "",
            "Model::where('foo', '=', 'bar')->firstOrFail();": "Exception",
            "Model::where('foo', '=', 'bar')->count();": "",
            "Model::where('foo', '=', 'bar')->delete();": "",
            "Model::whereRaw('foo = bar and cars = 2', array(20))->get();": "",
            "Model::on('connection-name')->find(1);": "",
            "Model::with('relation')->get();": ""
        },
        
        "items": [
            {
                "title": "Soft Delete",
                "cheat": {
                    "Model::withTrashed()->where('cars', 2)->get();": "",
                    "Model::withTrashed()->where('cars', 2)->restore();": "",
                    "Model::where('cars', 2)->forceDelete();": "",
                    "Model::onlyTrashed()->where('cars', 2)->get();": ""
                }
            },
            {
                "title": "Events",
                "cheat": {
                    "Model::creating(function($model){});": "",
                    "Model::created(function($model){});": "",
                    "Model::updating(function($model){});": "",
                    "Model::updated(function($model){});": "",
                    "Model::saving(function($model){});": "",
                    "Model::saved(function($model){});": "",
                    "Model::deleting(function($model){});": "",
                    "Model::deleted(function($model){});": "",
                    "Model::observe(new FooObserver);": ""
                }
            }            
        ]
    },
    
    "mail":{
        "title": "Mail",
        "doc": "http://www.laravel.com/docs/mail",
        "cheat": {
            "Mail::send('email.view', $data, function($message){});": "",
            "Mail::send(array('html.view', 'text.view'), $data, $callback);": "",
            "Mail::queue('email.view', $data, function($message){});": "",
            "Mail::queueOn('queue-name', 'email.view', $data, $callback);": "",
            "Mail::later(5, 'email.view', $data, function($message){});": "",
            "Mail::pretend();": "Write all email to logs instead of sending"
        }
    },
    
    "queues":{
        "title": "Queues",
        "doc": "http://www.laravel.com/docs/queues",
        "cheat": {
            "Queue::push('SendMail', array('message' => $message));": "",
            "Queue::push('SendEmail@send', array('message' => $message));": "",
            "Queue::push(function($job) use $id {});": "",
            "php artisan queue:listen": "",
            "php artisan queue:listen connection": "",
            "php artisan queue:listen --timeout=60": "",
            "php artisan queue:work": ""
        }
    },
    
    "localization":{
        "title": "Localization",
        "doc": "http://www.laravel.com/docs/localization",
        "cheat": {
            "App::setLocale('en');": "",
            "Lang::get('messages.welcome');": "",
            "Lang::get('messages.welcome', array('foo' => 'Bar'));": "",
            "Lang::has('messages.welcome');": "",
            "Lang::choice('messages.apples', 10);": ""
        }
    },
    
    "files":{
        "title": "Files",
        "doc": "http://www.laravel.com/docs/files",
        "cheat": {
            "File::exists('path');": "",
            "File::get('path');": "",
            "File::getRemote('path');": "",
            "File::getRequire('path');": "",
            "File::requireOnce('path');": "",
            "File::put('path', 'contents');": "",
            "File::append('path', 'data');": "",
            "File::delete('path');": "",
            "File::move('path', 'target');": "",
            "File::copy('path', 'target');": "",
            "File::extension('path');": "",
            "File::type('path');": "",
            "File::size('path');": "",
            "File::lastModified('path');": "",
            "File::isDirectory('directory');": "",
            "File::isWritable('path');": "",
            "File::isFile('file');": "",
            "File::glob($patterns, $flag);": "Find path names matching a given pattern.",
            "File::files('directory');": "Get an array of all files in a directory.",
            "File::allFiles('directory');": "Get all of the files from the given directory (recursive).",
            "File::directories('directory');": "Get all of the directories within a given directory.",
            "File::makeDirectory('path',  $mode = 0777, $recursive = false);": "",
            "File::copyDirectory('directory', 'destination', $options = null);": "",
            "File::deleteDirectory('directory', $preserve = false);": "",
            "File::cleanDirectory('directory');": ""
        }
    },
    
    "input": {
        "title": "Input",
        "doc": "http://www.laravel.com/docs/input",
        "cheat": {
            "Input::get('key');": "",
            "Input::get('key', 'default');": "Default if the key is missing",
            "Input::has('key');": "",
            "Input::all();": "Only retrieve 'foo' and 'bar' when getting input",
            "Input::only('foo', 'bar');": "Disregard 'foo' when getting input",
            "Input::except('foo');":""
        },
        "items": [
            {
                "title": "Session Input (flash)",
                "cheat": {
                    "": "Flash input to the session",
                    "Input::flash();": "",
                    "Input::flashOnly('foo', 'bar');": "",
                    "Input::flashExcept('foo', 'baz');": "",
                    "Input::old('key');": ""
                }
            },
            {
                "title": "Files",
                "cheat": {
                    "": "Use a file that's been uploaded",
                    "Input::file('filename');": "Determine if a file was uploaded",
                    "Input::hasFile('filename');": "Access file properties",
                    "Input::file('name')->getRealPath();": "",
                    "Input::file('name')->getClientOriginalName();":"",
                    "Input::file('name')->getSize();":"",
                    "Input::file('name')->getMimeType();": "Move an uploaded file",
                    "Input::file('name')->move($destinationPath);": "Move an uploaded file",
                    "Input::file('name')->move($destinationPath, $fileName);":""
                }
            }            
        ]
    },
    
    "cache": {
        "title": "Cache",
        "doc": "http://www.laravel.com/docs/cache",
        "cheat": {
            "Cache::put('key', 'value', $minutes);":"",
            "Cache::add('key', 'value', $minutes);":"",
            "Cache::forever('key', 'value');":"",
            "Cache::remember('key', $minutes, function(){ return 'value' });":"",
            "Cache::rememberForever('key', function(){ return 'value' });":"",
            "Cache::forget('key');":"",
            "Cache::has('key');":"",
            "Cache::get('key');":"",
            "Cache::get('key', 'default');":"",
            "Cache::get('key', function(){ return 'default'; });":"",
            "Cache::increment('key');":"",
            "Cache::increment('key', $amount);":"",
            "Cache::decrement('key');":"",
            "Cache::decrement('key', $amount);":"",
            "Cache::section('group')->put('key', $value);":"",
            "Cache::section('group')->get('key');":"",
            "Cache::section('group')->flush();":"",
            "DB::table('users')->remember(10)->get();":"cache query in minutes"
        }
    },
    
    "cookies": {
        "title": "Cookies",
        "doc": "http://www.laravel.com/docs/cookies",
        "cheat": {
            "Cookie::get('key');" :"Create a cookie that lasts for ever",
            "Cookie::forever('key', 'value');": "Send a cookie with a response",
            "$response = Response::make('Hello World');": "",
            "$response->withCookie(Cookie::make('name', 'value', $minutes));": ""
        }
    },
    
    "sessions": {
        "title": "Sessions",
        "doc": "http://www.laravel.com/docs/sessions",
        "cheat": {
            "Session::get('key');" :"",
            "Session::get('key', 'default');" :"",
            "Session::get('key', function(){ return 'default'; });" :"",
            "Session::put('key', 'value');" :"",
            "Session::all();" :"",
            "Session::has('key');" :"",
            "Session::forget('key');" :"",
            "Session::flush();" :"",
            "Session::regenerate();" :"",
            "Session::flash('key', 'value');" :"",
            "Session::reflash();" :"",
            "Session::keep(array('key1', 'key2'));": ""
        }
    },
    
    "requests": {
        "title": "Requests",
        "doc": "http://www.laravel.com/docs/requests",
        "cheat": {
            "Request::path();" :"",
            "Request::is('foo/*');" :"",
            "Request::url();" :"",
            "Request::segment(1);" :"",
            "Request::header('Content-Type');" :"",
            "Request::server('PATH_INFO');" :"",
            "Request::ajax();" :"",
            "Request::secure();": ""
        }
    },
    
    "responses": {
        "title": "Responses",
        "doc": "http://www.laravel.com/docs/responses",
        "cheat": {
            "return Response::make($contents);" :"",
            "return Response::make($contents, 200);" :"",
            "return Response::json(array('key' => 'value'));" :"",
            "return Response::json(array('key' => 'value'))" :"",
            "\t->setCallback(Input::get('callback'));" :"",
            "return Response::download($filepath);" :"",
            "return Response::download($filepath, $filename, $headers);": "",
            "":"Create a response and modify a header value",
            "return Response::make($contents, 200)": "",
            "\t->header('Content-Type', 'application/json');":"",
            " ": "Attach a cookie to a response",
            "return Response::make($content)": "",
            "\t->withCookie(Cookie::make('key', 'value'));": ""
        }
    }     
    
}
